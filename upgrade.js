// Generated by CoffeeScript 1.8.0
(function() {
  var Item, Totals, Upgrader,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Item = (function() {
    function Item(data) {
      ko.mapping.fromJS(data, {}, this);
    }

    Item.prototype.displayName = function() {
      var name;
      name = "" + (this.data.itemName()) + ": " + (this.bucket.bucketName());
      if (this.vault()) {
        name += " Vault";
      }
      return name;
    };

    Item.prototype.check_vault = function() {
      return !this.vault();
    };

    return Item;

  })();

  Totals = (function() {
    function Totals() {
      this.add = __bind(this.add, this);
      this.count = __bind(this.count, this);
      this.names = ko.observableArray([]);
      this.list = ko.computed((function(_this) {
        return function() {
          var name, _i, _len, _ref, _results;
          _ref = _this.names();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            _results.push([name, _this[name]()]);
          }
          return _results;
        };
      })(this));
    }

    Totals.prototype.count = function(name) {
      if (this[name]) {
        return this[name]();
      } else {
        return 0;
      }
    };

    Totals.prototype.add = function(name, count) {
      if (this[name]) {
        return this[name](this[name]() + count);
      } else {
        this[name] = ko.observable(count);
        return this.names.push(name);
      }
    };

    return Totals;

  })();

  Upgrader = (function() {
    Upgrader.prototype.baseInventoryUrl = window.location.protocol + "//www.bungie.net/Platform/Destiny/1/Account/ACCOUNT_ID_SUB/Character/CHARACTER_ID_SUB/Inventory/IIID_SUB/?lc=en&fmt=true&lcin=true&definitions=true";

    Upgrader.prototype.vaultInventoryUrl = window.location.protocol + "//www.bungie.net/Platform/Destiny/1/MyAccount/Character/CHARACTER_ID_SUB/Vendor/VENDOR_ID/?lc=en&fmt=true&lcin=true&definitions=true";

    function Upgrader() {
      this.addItem = __bind(this.addItem, this);
      var error;
      this.accountID = null;
      this.characterID = null;
      this.items = ko.observableArray();
      this.totals = new Totals;
      this.vaultTotals = new Totals;
      this.ownedTotals = new Totals;
      this.setIDs();
      this.vaultLoaded = ko.observable(false);
      this.displayVault = ko.observable(false);
      this.error = ko.observable(false);
      try {
        this.processItems();
        this.venderTimeout = setInterval((function(_this) {
          return function() {
            return _this.processVault();
          };
        })(this), 600);
      } catch (_error) {
        error = _error;
        this.error("There was a problem loading the site: " + error);
      }
    }

    Upgrader.prototype.total_object = function() {
      if (this.displayVault()) {
        return this.vaultTotals;
      } else {
        return this.totals;
      }
    };

    Upgrader.prototype.processVault = function() {
      var id, obj, url, vendor_id, _ref;
      vendor_id = null;
      if (DEFS.vendorDetails) {
        _ref = DEFS.vendorDetails;
        for (id in _ref) {
          obj = _ref[id];
          vendor_id = id;
        }
      }
      if (vendor_id) {
        clearInterval(this.venderTimeout);
        this.vaultLoaded(true);
        url = this.vaultInventoryUrl.replace("CHARACTER_ID_SUB", this.characterID).replace("VENDOR_ID", vendor_id);
        return $.ajax({
          url: url,
          type: "GET",
          beforeSend: function(xhr) {
            var key, value, _ref1, _results;
            xhr.setRequestHeader('Accept', "application/json, text/javascript, */*; q=0.01");
            _ref1 = bungieNetPlatform.getHeaders();
            _results = [];
            for (key in _ref1) {
              value = _ref1[key];
              _results.push(xhr.setRequestHeader(key, value));
            }
            return _results;
          }
        }).done((function(_this) {
          return function(item_json) {
            var bucket, datas, item, _i, _len, _ref1, _results;
            _ref1 = item_json["Response"]["data"]["inventoryBuckets"];
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              bucket = _ref1[_i];
              _results.push((function() {
                var _j, _len1, _ref2, _results1;
                _ref2 = bucket.items;
                _results1 = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  item = _ref2[_j];
                  datas = item_json["Response"]["definitions"]["items"][item.itemHash];
                  if (this.ownedTotals[datas.itemName]) {
                    this.ownedTotals.add(datas.itemName, item.stackSize);
                  }
                  _results1.push(this.addItem(item.itemInstanceId, {
                    "vault": true,
                    "data": datas,
                    "instance": item,
                    "bucket": item_json["Response"]["definitions"]["buckets"][bucket.bucketHash]
                  }));
                }
                return _results1;
              }).call(_this));
            }
            return _results;
          };
        })(this));
      } else {

      }
    };

    Upgrader.prototype.processItems = function() {
      var bucket, data, item, name, object, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      _ref = tempModel.inventory.buckets.Equippable;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _ref1 = item.items;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          object = _ref1[_j];
          data = DEFS["items"][object.itemHash];
          this.addItem(object.itemInstanceId, {
            "vault": false,
            "instance": object,
            "data": data,
            "bucket": DEFS['buckets'][data.bucketTypeHash]
          });
        }
      }
      _ref2 = tempModel.inventory.buckets.Item;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        bucket = _ref2[_k];
        if (DEFS.buckets[bucket.bucketHash].bucketIdentifier === "BUCKET_MATERIALS") {
          _results.push((function() {
            var _l, _len3, _ref3, _results1;
            _ref3 = bucket.items;
            _results1 = [];
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              item = _ref3[_l];
              name = DEFS["items"][item.itemHash].itemName;
              _results1.push(this.ownedTotals.add(name, item.stackSize));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Upgrader.prototype.setIDs = function() {
      var matches;
      matches = window.location.pathname.match(/(.+)\/(\d+)\/(\d+)/);
      this.accountID = matches[2];
      return this.characterID = matches[3];
    };

    Upgrader.prototype.group_by = function(array, key) {
      var item, items, _i, _len, _name;
      items = {};
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        item = array[_i];
        (items[_name = item[key]] || (items[_name] = [])).push(item);
      }
      return items;
    };

    Upgrader.prototype.addItem = function(iiid, base_object) {
      var url;
      url = this.baseInventoryUrl.replace("ACCOUNT_ID_SUB", this.accountID).replace("CHARACTER_ID_SUB", this.characterID).replace("IIID_SUB", iiid);
      return $.ajax({
        url: url,
        type: "GET",
        beforeSend: function(xhr) {
          var key, value, _ref, _results;
          xhr.setRequestHeader('Accept', "application/json, text/javascript, */*; q=0.01");
          _ref = bungieNetPlatform.getHeaders();
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            _results.push(xhr.setRequestHeader(key, value));
          }
          return _results;
        }
      }).done((function(_this) {
        return function(item_json) {
          var clean_array, clean_list, m, material, material_list, materials, ms, name, talentNodes, total, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
          material_list = [];
          _ref = item_json["Response"]["data"]["talentNodes"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            talentNodes = _ref[_i];
            _ref1 = talentNodes.materialsToUpgrade;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              material = _ref1[_j];
              material["name"] = item_json["Response"]["definitions"]["items"][material.itemHash]["itemName"];
              material_list.push(material);
            }
          }
          materials = _this.group_by(material_list, "name");
          base_object["json"] = item_json;
          base_object["material"] = materials;
          clean_list = {};
          for (name in materials) {
            ms = materials[name];
            total = 0;
            for (_k = 0, _len2 = ms.length; _k < _len2; _k++) {
              m = ms[_k];
              total = total + m.count;
            }
            _this.vaultTotals.add(name, total);
            if (!base_object["vault"]) {
              _this.totals.add(name, total);
            }
            clean_list[name] = total;
          }
          clean_array = (function() {
            var _results;
            _results = [];
            for (name in clean_list) {
              total = clean_list[name];
              _results.push({
                name: name,
                total: total
              });
            }
            return _results;
          })();
          base_object["material_names"] = clean_list;
          base_object["material_array"] = clean_array;
          return _this.items.push(new Item(base_object));
        };
      })(this));
    };

    return Upgrader;

  })();

  window.upgrader = new Upgrader;

  if (!$('.upgrader')[0]) {
    $(".nav_top").append("<li class='upgrader' style='width:300px;clear:left;background-color:white;min-height:10px;max-height:550px;overflow-x:auto'> <div style='height:20px'> <!-- ko ifnot: error --> <a href='#' onclick='$(\"#upgrader-data\").toggle();return false;'>UPGRADES</a> <!-- /ko --> <!-- ko if: error --> <span data-bind='text: error'></span> <!-- /ko --> </div> <span id='upgrader-data' data-bind='ifnot: error'> <label><input type='checkbox' data-bind='checked: displayVault, attr: {disabled: !vaultLoaded()}' /> <!-- ko ifnot: vaultLoaded()--> Click Gear for Vault <!-- /ko --> <!-- ko if: vaultLoaded()--> Include Vault <!-- /ko --> </label> <ul class='totals' data-bind='foreach: total_object().list()'> <li data-bind=\"text: $data[0]+': '+$data[1]+'('+$parent.ownedTotals.count($data[0])+')'\"></li> </ul> <ul class='totals' data-bind='foreach: items'> <!-- ko if:(material_array()[0] && ($parent.displayVault() || !vault())) --> <li class='item' style='border-bottom: solid 1px'> <span data-bind='text: displayName()'></span> <ul data-bind='foreach: material_array()'> <li style='color:#B5B7A4;background-color:#4D5F5F' data-bind=\"text: name()+': '+total()\"></li> </ul> </li> <!-- /ko --> </ul> </span> </li>");
    ko.applyBindings(window.upgrader, $('.upgrader')[0]);
  }

}).call(this);
